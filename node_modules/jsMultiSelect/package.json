{
  "name": "jsMultiSelect",
  "version": "1.0.1",
  "description": "Creating optimized SELECT sql commands to make multiple select with a single batch",
  "main": "src/jsMultiSelect.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~3.1.0",
    "JQDeferred": "^2.1.0",
    "jsDataQuery": "git://github.com/gaelazzo/jsDataQuery.git"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-yuidoc": "^0.7.0",
    "jasmine-core": "^2.2.0",
    "jasmine-node": "2.0.0-beta4",
    "grunt-jasmine-node-new": "^0.3.2",
    "jasmine-collection-matchers": "*",
    "load-grunt-tasks": "^3.1.0",
    "time-grunt": "^1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gaelazzo/jsMultiSelect.git"
  },
  "keywords": [
    "query",
    "database",
    "javascript",
    "sql",
    "multiple table"
  ],
  "author": {
    "name": "Gaetano Lazzo"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/gaelazzo/jsMultiSelect/issues"
  },
  "homepage": "https://github.com/gaelazzo/jsMultiSelect#readme",
  "gitHead": "03c93bec8a8f92212e651199bcfec6a57399fb08",
  "readme": "# jsMultiSelect\r\nCreating optimized sql  SELECT commands to make multiple select with a single instruction\r\n\r\n\r\n\r\n# MultiCompare Class#\r\nMultiCompare is a class representing the comparison of n given fields with n given values.\r\n\r\n## MultiCompare(fields,values) ##\r\n\r\n * @param {string[]} fields\r\n * @param {object[]} values\r\n * @returns {MultiCompare}\r\n\r\n## sameFieldsAs(multiComp) ##\r\n\r\nChecks if this MultiCompare has same comparison fields of another one.\r\n  \r\n * @param multiComp\r\n * @returns {boolean}\r\n\r\n\r\n# OptimizedMultiCompare #\r\n\r\nOptimizedMultiCompare is a specialized MultiCompare class. An OptimizedMultiCompare instance is built merging multiple MultiCompare instances.\r\n\r\n## OptimizedMultiCompare(multiComp) ##\r\n\r\nConstructor for a OptimizedMultiCompare, accepting a MultiCompare as parameter.\r\n\r\n* @param {MultiCompare} multiComp\r\n* @returns {OptimizedMultiCompare}\r\n\r\n\r\n## joinWith(other) ##\r\n\r\nJoin this multicomparator with another one, if it is possible. Returns false if it is not possible.\r\n\r\n * @param {OptimizedMultiCompare} other\r\n * @return {boolean}\r\n\r\n\r\n\r\n# Select #\r\nClass representing a query to be done on a table\r\n\r\n## Select(columnList) ##\r\n\r\nCreates a select providing an optional column list\r\n\r\n * @param {string[]} columnList\r\n * @return {Select}\r\n\r\n\r\n## where(filter) ##\r\n\r\nSets the manual filter for this Select. We call this kind of filtering  \"not-optimized\"\r\n\r\n * @param {sqlFun} filter\r\n * returns {Select} this\r\n\r\nsqlFun is a kind of object defined in  [jsDataQuery](https://github.com/gaelazzo/jsDataQuery \"jsDataQuery\")\r\n\r\n\r\n## staticFilter(filter) ##\r\n\r\nSets an additional static filter for this query\r\n\r\n* @param {sqlFun} filter\r\n* @returns {Select} this\r\n\r\n## multiCompare(multiComp) ##\r\n\r\nSets a multicompare filter for the Select\r\n \r\n* @param {MultiCompare} multiComp\r\n* @returns {Select} this\r\n\r\n## from (tableName) ##\r\nSets the table associated to this select\r\n\r\n * @param {string} tableName\r\n * @returns {Select} this\r\n \r\nSelect.prototype.from = function (tableName)\r\n\r\n\r\n##  intoTable(alias) ##\r\nSets a destination table for this select (alias)\r\n \r\n * @param {string} alias\r\n * @returns {Select} this\r\n \r\n## orderBy(sorting) ##\r\nSet the sorting method for the select\r\n  \r\n * @param {string} sorting\r\n * @returns {Select} this\r\n \r\n## top([n]) ##\r\nGets/Sets the top options for the query\r\n \r\n * @param {string} [n]\r\n * @returns {string | undefined}\r\n\r\n## canAppendTo(other) ##\r\nCheck if this Select can be appended to another one, i.e., has same tableName and alias\r\n \r\n * @param {Select} other\r\n * @returns {boolean}\r\n\r\n## optimizedAppendTo(other) ##\r\nTries to append this Select to another one in an optimized way and returns true on success.  An optimized Append is possible only if two select are both optimized\r\n \r\n * @param {Select} other\r\n * @returns {boolean}\r\n\r\n## appendTo(other) ##\r\nAppends this Select to another one or-joining their conditions, returns true if appending succeeded\r\n \r\n * @param {Select} other\r\n * @returns {boolean}\r\n\r\n\r\n\r\n# groupSelect(selectList) #\r\nThis is a standalone function, which takes a list of Select to same table and evaluates an equivalent Select joining all their input filters\r\n",
  "readmeFilename": "README.MD",
  "_id": "jsMultiSelect@1.0.1",
  "_shasum": "2691079e4be9cc77f58a652d479cde83f75538db",
  "_from": "git://github.com/gaelazzo/jsMultiSelect.git",
  "_resolved": "git://github.com/gaelazzo/jsMultiSelect.git#03c93bec8a8f92212e651199bcfec6a57399fb08"
}
