{
  "name": "jsSqlServerDriver",
  "version": "1.0.1",
  "description": "Javascrit Driver for Microsoft Sql Server Database",
  "main": "src/jsSqlServerDriver.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~3.1.0",
    "jsDataQuery": "git://github.com/gaelazzo/jsDataQuery.git",
    "JQDeferred": "^2.1.0",
    "jsSqlServerFormatter": "git://github.com/gaelazzo/jsSqlServerFormatter.git",
    "edge": "latest",
    "edge-sql": "git://github.com/gaelazzo/edge-sql.git"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-yuidoc": "^0.7.0",
    "jasmine-core": "^2.2.0",
    "jasmine-node": "2.0.0-beta4",
    "grunt-jasmine-node-new": "^0.3.2",
    "jasmine-collection-matchers": "*",
    "load-grunt-tasks": "^3.1.0",
    "time-grunt": "^1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gaelazzo/jsSqlServerDriver.git"
  },
  "keywords": [
    "query",
    "expression",
    "javascript",
    "sql",
    "compiler"
  ],
  "author": {
    "name": "Gaetano Lazzo"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/gaelazzo/jsSqlServerDriver/issues"
  },
  "homepage": "https://github.com/gaelazzo/jsSqlServerDriver#readme",
  "gitHead": "60579409b0d8a35fa13ee6b364d4e10fd3c7eb78",
  "readme": "# jsSqlServerDriver\r\nJavascript Sql Server driver. Allows you to read/write and do anything you want with a MS Sql Server database using javascript.\r\nEvery command returns a promise of a [jQuery Deferred object](https://www.npmjs.com/package/JQDeferred)\r\n\r\nSome of the available method are\r\n\r\n## useSchema(schema) ##\r\nChange current used schema for this connection\r\n\r\n## setTransactionIsolationLevel(isolationLevel) ##\r\nSets the Transaction isolation level for current connection\r\n\r\n## checkLogin(login, password)   ##\r\nCheck login/password, returns true if successful, false if user/password does not match\r\n\r\n## open() ##\r\nOpens the underlying connection and sets the current specified schema\r\n \r\n## close() ##\r\nCloses the underlying connection\r\n\r\n## queryBatch(query[, raw]) ##\r\nExecutes a sql command and returns all sets of results. Each Results is given via a notify or resolve\r\n\r\n- @param {string} query sql command to execute\r\n\r\n- @param {boolean} [raw] if true, data are left in raw state and will be objectified by the client\r\n \r\n- @returns {*}  a sequence of {[array of plain objects]} or {meta:[column names],rows:[arrays of raw data\r\n\r\n## queryLines(query[,raw]) ##\r\nGets a table and returns each SINGLE row by notification. Can return more than a table \r\n\r\n * For each table read emits a {meta:[column descriptors]} notification, and for each row of data emits a series of\r\n *   {row:object read from db} if raw= false\r\n *   {row: [array of values read from db]} if raw= true\r\n\r\n## queryPackets(query, raw, packSize) ##\r\nGets data with a query getting (max) n row at a time\r\n \r\n\r\n\r\n## updateBatch(query) ##\r\nExecutes a series of sql update/insert/delete commands\r\n\r\n\r\n## beginTransaction (isolationLevel) ##\r\nBegins a transaction\r\n\r\n## commit() ##\r\nCommits a transaction\r\n \r\n## rollBack() ##\r\nRollBacks a transaction\r\n  \r\n\r\n## getSelectCommand (options) ##\r\nGet the string representing a select command\r\n\r\n * @param {object} options\r\n * @param {string} options.tableName\r\n * @param {string} options.columns\r\n * @param {sqlFun} [options.filter]\r\n * @param {string} [options.top]\r\n * @param {string} [options.orderBy]\r\n * @param {object} [options.environment]\r\n * @returns {string}\r\n\r\nsqlFun is an object used in [jsDataQuery](https://github.com/gaelazzo/jsDataQuery \"jsDataQuery\")\r\n\r\n## getSelectCount(options) ##\r\nGet the string representing a select count(*) command\r\n \r\n * @param {object} options\r\n * @param {string} options.tableName\r\n * @param {sqlFun} [options.filter]\r\n * @param {object} [options.environment]\r\n * @returns {string}\r\n\r\n\r\n## getDeleteCommand(options) ##\r\nGet the string representing a delete command\r\n\r\n * @param {object} options\r\n * @param {string} options.tableName\r\n * @param {sqlFun} [options.filter]\r\n * @param {object} [options.environment]\r\n * @returns {string}\r\n\r\n## getInsertCommand(options) ##\r\nGet the string representing an insert command\r\n\r\n * @param {string} table\r\n * @param {Array} columns\r\n * @param {Array} values\r\n * @returns {string}\r\n\r\n## getUpdateCommand(options) ##\r\nGet the string representing an update command\r\n \r\n * @param {object} options\r\n * @param {string} options.table\r\n * @param {sqlFun} options.filter\r\n * @param {Array} options.columns\r\n * @param {Array} options.values\r\n * @param {object} [options.environment]\r\n * @returns {string}\r\n\r\n## callSPWithNamedParams(options) ##\r\nCall SP with a list of parameters each of which is an object having:\r\n\r\n *  value,\r\n *  optional 'sqltype' name compatible with the used db, necessary if is an output parameter\r\n *  optional out: true if it is an output parameter\r\n \r\nThe SP eventually returns a collection of tables and (finally) an object with a property for each output parameter of the SP\r\n\r\n \r\n * @param {object} options\r\n * @param {string} options.spName\r\n * @param {Array} options.paramList\r\n * @param {boolean} [options.raw=false]\r\n * @returns {Array}\r\n\r\n## tableDescriptor(tableName) ##\r\nGets information about a db table\r\n * @param {string} tableName\r\n * @returns {Array}\r\n * The result has columns: DBO, name, type, len, precision, scale, is_nullable, pk\r\n\r\n\r\n## getFormatter ##\r\nGets the sqlFormatter for this kind of connection. This returns a jsSqlServerFormatter (see [jsSqlServerFormatter](https://github.com/gaelazzo/jsSqlServerFormatter \"jsSqlServerFormatter\"). \r\nThis is  meant to be used in [jsDataQuery](https://github.com/gaelazzo/jsDataQuery )\r\n\r\n## run(script) ##\r\nRuns a sql script, eventually composed of multiple blocks separed by GO lines\r\n * @param {string} script\r\n\r\nsee test specs for examples of use",
  "readmeFilename": "README.MD",
  "_id": "jsSqlServerDriver@1.0.1",
  "_shasum": "3b4995444c554892cd429a27413401c7e0f9430a",
  "_from": "git://github.com/gaelazzo/jsSqlServerDriver.git",
  "_resolved": "git://github.com/gaelazzo/jsSqlServerDriver.git#60579409b0d8a35fa13ee6b364d4e10fd3c7eb78"
}
